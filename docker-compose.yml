services:
  traefik:
    image: traefik
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.email=olespid@gmail.com"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=c3r5b8.dev"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.c3r5b8.dev"
      - "--metrics.prometheus=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`proxy.c3r5b8.dev`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    ports:
      - "80:80"
      - "443:443"
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./services/traefik/acme.json:/acme.json"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/Kyiv
      - WEBUI_PORT=8080
      - DOCKER_MODS=ghcr.io/vuetorrent/vuetorrent-lsio-mod:latest
      - TORRENTING_PORT=6881
    volumes:
      - ./services/qbittorrent:/config
      - /mnt/fat_ssd/media:/downloads
    ports:
      - 8080:8080
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorent.rule=Host(`qb.c3r5b8.dev`)"
      - "traefik.http.services.qbittorent.loadbalancer.server.port=8080"

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      # - "80:80/tcp"
      # - "443:443/tcp"
    environment:
      TZ: 'Europe/Kyiv'
      FTLCONF_dns_listeningMode: 'all'
    volumes:
      - './services/pihole:/etc/pihole'
    cap_add:
      - SYS_NICE
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`pihole.c3r5b8.dev`)"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"


  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/Kyiv
      - DELUGE_LOGLEVEL=error
    volumes:
      - ./services/deluge/config:/config
      - /mnt/fat_ssd/media:/downloads
    ports:
      - 6881:6881
      - 6881:6881/udp
      - 58846:58846
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.deluge.rule=Host(`deluge.c3r5b8.dev`)"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"

  #
  # media

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Kyiv
      # - DOCKER_MODS=linuxserver/mods:jellyfin-opencl-intel
    volumes:
      - ./services/jellyfin:/config
      - /mnt/fat_ssd/media:/media
    # devices:
    #   - /dev/dri:/dev/dri
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.c3r5b8.dev`)"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
    restart: unless-stopped

  multi-scrobbler:
    image: foxxmd/multi-scrobbler
    container_name: multi-scrobbler
    environment:
      - TZ=Europe/Kyiv
      - BASE_URL=https://multiscrobbler.c3r5b8.dev:443
      - PUID=1000
      - PGID=1000
    volumes:
      - "./services/multi-scrobbler:/config"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.multi-scrobbler.rule=Host(`multiscrobbler.c3r5b8.dev`)"
      - "traefik.http.services.multi-scrobbler.loadbalancer.server.port=9078"

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - WATCHTOWER_NOTIFICATIONS=gotify
      - WATCHTOWER_NOTIFICATION_GOTIFY_URL=https://gotify.c3r5b8.dev
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN=${WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  memos:
    image: neosmemo/memos:stable
    container_name: memos
    restart: unless-stopped
    volumes:
      - ./services/memos/:/var/opt/memos
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.memos.rule=Host(`memo.c3r5b8.dev`)"
      - "traefik.http.services.memos.loadbalancer.server.port=5230"

  couchdb:
    image: couchdb
    container_name: obsidian-livesync
    # user: 1000:1000
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    volumes:
      - ./services/couchdb2/data:/opt/couchdb/data
      - ./services/couchdb2/etc:/opt/couchdb/etc/local.d
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.obsidian-livesync.rule=Host(`ols.c3r5b8.dev`)"
      - "traefik.http.services.obsidian-livesync.loadbalancer.server.port=5984"
      # The 'websecure' entryPoint is basically your HTTPS entrypoint. Check the next code snippet if you are encountering problems only; you probably have a working traefik configuration if this is not your first container you are reverse proxying.
#      - "traefik.http.routers.obsidian-livesync.entrypoints=websecure"
#      - "traefik.http.routers.obsidian-livesync.service=obsidian-livesync"
#      - "traefik.http.services.obsidian-livesync.loadbalancer.server.port=5984"
#      - "traefik.http.routers.obsidian-livesync.tls=true"
      # Replace the string 'letsencrypt' with your own certificate resolver
#      - "traefik.http.routers.obsidian-livesync.tls.certresolver=letsencrypt"
#      - "traefik.http.routers.obsidian-livesync.middlewares=obsidiancors"
      # The part needed for CORS to work on Traefik 2.x starts here
      - "traefik.http.middlewares.obsidiancors.headers.accesscontrolallowmethods=GET,PUT,POST,HEAD,DELETE"
      - "traefik.http.middlewares.obsidiancors.headers.accesscontrolallowheaders=accept,authorization,content-type,origin,referer"
      - "traefik.http.middlewares.obsidiancors.headers.accesscontrolalloworiginlist=app://obsidian.md,capacitor://localhost,http://localhost"
      - "traefik.http.middlewares.obsidiancors.headers.accesscontrolmaxage=3600"
      - "traefik.http.middlewares.obsidiancors.headers.addvaryheader=true"
      - "traefik.http.middlewares.obsidiancors.headers.accessControlAllowCredentials=true"

    restart: unless-stopped

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`pass.c3r5b8.dev`)"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
    volumes:
      - ./services/vaultwarden:/data
    environment:
      - DOMAIN=https://pass.c3r5b8.dev
      - WEBSOCKET_ENABLED=true

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/dozzle:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`dozzle.c3r5b8.dev`)"
    environment:
      DOZZLE_AUTH_PROVIDER: simple

  gotify:
    image: gotify/server
    container_name: gotify
    restart: unless-stopped
    volumes:
      - ./services/gotify:/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gotify.rule=Host(`gotify.c3r5b8.dev`)"
      - "traefik.http.services.gotify.loadbalancer.server.port=80"
  #
  # immich

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.immich-server.rule=Host(`immich.c3r5b8.dev`)"
      - "traefik.http.services.immich-server.loadbalancer.server.port=2283"

    depends_on:
      - redis
      - database
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always

  redis:
    container_name: immich_redis
    image: registry.hub.docker.com/library/redis:6.2-alpine@sha256:84882e87b54734154586e5f8abd4dce69fe7311315e2fc6d67c29614c8de2672
    restart: always

  database:
    container_name: immich_postgres
    image: registry.hub.docker.com/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    restart: always
    command: [ "postgres", "-c", "shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on" ]

volumes:
  model-cache:
