services:
  traefik:
    image: traefik
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic-config.yaml"
      - "--entrypoints.web.address=:80"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.email=olespid@gmail.com"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=c3r5b8.dev"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.c3r5b8.dev"
      - "--metrics.prometheus=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`proxy.c3r5b8.dev`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    ports:
      - "80:80"
      - "443:443"
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./services/traefik/acme.json:/acme.json"
      - "./services/traefik/traefik.json:/traefik.json"
      - "./services/traefik/traefik.yaml:/etc/traefik/dynamic-config.yaml"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/Kyiv
      - DELUGE_LOGLEVEL=error
    volumes:
      - ./services/deluge/config:/config
      - /mnt/fat_ssd/media:/downloads
    ports:
      # - 8112:8112
      - 6881:6881
      - 6881:6881/udp
      - 58846:58846
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.deluge.rule=Host(`deluge.c3r5b8.dev`)"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"

  #
  # media

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Kyiv
      - DOCKER_MODS=linuxserver/mods:jellyfin-opencl-intel
    volumes:
      - ./services/jellyfin:/config
      - /mnt/fat_ssd/media:/media
    devices:
      - /dev/dri:/dev/dri
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.c3r5b8.dev`)"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
    restart: unless-stopped

  pinchflat:
    image: ghcr.io/kieraneglin/pinchflat:latest
    environment:
      - TZ=Europe/Kyiv
      - PUID=1000
      - PGID=1000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pinchfla.rule=Host(`pinchfla.c3r5b8.dev`)"
      - "traefik.http.services.pinchfla.loadbalancer.server.port=8945"
    volumes:
      - ./services/pinchfla:/config
      - /mnt/fat_ssd/media:/downloads

  multi-scrobbler:
    image: foxxmd/multi-scrobbler
    container_name: multi-scrobbler
    environment:
      - TZ=Europe/Kyiv
      - BASE_URL=https://multiscrobbler.c3r5b8.dev:443
      - PUID=1000
      - PGID=1000
    volumes:
      - "./services/multi-scrobbler:/config"
    ports:
      - "9078:9078"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.multi-scrobbler.rule=Host(`multiscrobbler.c3r5b8.dev`)"
      - "traefik.http.services.multi-scrobbler.loadbalancer.server.port=9078"

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - WATCHTOWER_NOTIFICATIONS=gotify
      - WATCHTOWER_NOTIFICATION_GOTIFY_URL=https://gotify.c3r5b8.dev
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN=${WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  memos:
    image: neosmemo/memos:stable
    container_name: memos
    restart: unless-stopped
    volumes:
      - ./services/memos/:/var/opt/memos
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.memos.rule=Host(`memo.c3r5b8.dev`)"
      - "traefik.http.services.memos.loadbalancer.server.port=5230"

  couchdb:
    image: couchdb
    container_name: obsidian-livesync
    user: 1000:1000
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    volumes:
      - ./services/couchdb/data:/opt/couchdb/data
      - ./services/couchdb/local.ini:/opt/couchdb/etc/local.ini
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.obsidian-livesync.rule=Host(`ols.c3r5b8.dev`)"
      - "traefik.http.services.obsidian-livesync.loadbalancer.server.port=5984"
    restart: unless-stopped

  nocodb: 
    depends_on: 
      root_db: 
        condition: service_healthy
    image: "nocodb/nocodb:latest"
    container_name: noco
    environment: 
      NC_DB: "pg://nocodb:5432?u=${POSTGRES_USER}&p=${POSTGRES_PASSWORD}&d=root_db"
    restart: always
    volumes: 
      - "./services/nocodb/nocon:/usr/app/data"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.noco.rule=Host(`noco.c3r5b8.dev`)"
      - "traefik.http.services.noco.loadbalancer.server.port=8080"
  root_db: 
    container_name: nocodb
    environment:
    - POSTGRES_DB=${POSTGRES_DB}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_USER=${POSTGRES_USER}
    healthcheck: 
      interval: 10s
      retries: 10
      test: "pg_isready -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\""
      timeout: 2s
    image: postgres:16.6
    restart: always
    volumes: 
      - "./services/nocodb/db:/var/lib/postgresql/data"

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`pass.c3r5b8.dev`)"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
    volumes:
      - ./services/vaultwarden:/data
    environment:
      - DOMAIN=https://pass.c3r5b8.dev
      - WEBSOCKET_ENABLED=true

  maloja:
    image: "krateng/maloja:latest"
    container_name: maloja
    volumes:
      - ./services/maloja:/data
    environment:
      - MALOJA_DATA_DIRECTORY=/data
      - MALOJA_FORCE_PASSWORD=${MALOJA_FORCE_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maloja.rule=Host(`maloja.c3r5b8.dev`)"
      - "traefik.http.services.maloja.loadbalancer.server.port=42010"
    restart: unless-stopped

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - ./services/homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homeassistant.rule=Host(`home.c3r5b8.dev`)"
      - "traefik.http.services.homeassistant.loadbalancer.server.port=8123"
    privileged: true
    network_mode: host

  wakapi:
    image: ghcr.io/muety/wakapi:latest
    container_name: wakapi
    restart: unless-stopped
    environment:
      - WAKAPI_PUBLIC_URL=https://wakapi.c3r5b8.dev
      - WAKAPI_PASSWORD_SALT=${WAKAPI_PASSWORD_SALT}
    volumes:
      - ./services/wakapi:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wakapi.rule=Host(`wakapi.c3r5b8.dev`)"
      - "traefik.http.services.wakapi.loadbalancer.server.port=3000"

  #
  # monitoring

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./services/grafana:/var/lib/grafana
    user: '1000'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.c3r5b8.dev`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./services/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.c3r5b8.dev`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/dozzle:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`dozzle.c3r5b8.dev`)"
    environment:
      DOZZLE_AUTH_PROVIDER: simple

  gotify:
    image: gotify/server
    container_name: gotify
    restart: unless-stopped
    volumes:
      - ./services/gotify:/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gotify.rule=Host(`gotify.c3r5b8.dev`)"
      - "traefik.http.services.gotify.loadbalancer.server.port=80"
  #
  # immich

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.immich-server.rule=Host(`immich.c3r5b8.dev`)"
      - "traefik.http.services.immich-server.loadbalancer.server.port=2283"

    depends_on:
      - redis
      - database
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always

  redis:
    container_name: immich_redis
    image: registry.hub.docker.com/library/redis:6.2-alpine@sha256:84882e87b54734154586e5f8abd4dce69fe7311315e2fc6d67c29614c8de2672
    restart: always

  database:
    container_name: immich_postgres
    image: registry.hub.docker.com/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    restart: always
    command: [ "postgres", "-c", "shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on" ]

volumes:
  model-cache:
